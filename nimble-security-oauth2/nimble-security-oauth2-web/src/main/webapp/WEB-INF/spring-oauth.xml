<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">


    <!--
       - Access granted only if ALL voters approve.  A voter my abstain in which case if there are any voters that grant and none deny, access is granted
       -->
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
          xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <bean class="org.springframework.security.access.vote.RoleVoter"/>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>

    <authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService"/>
    </authentication-manager>

    <authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider ref="authenticationProvider"/>
    </authentication-manager>

    <bean id="authenticationProvider"
          class="com.nimble.security.authentication.rest.RestDelegatingAuthenticationProvider">
        <property name="createSessionEndpointUrl" value="https://app.nimble.com/api/sessions"/>
        <property name="userDetailsManager" ref="jdbcUserDetailsManager"/>
    </bean>

    <bean id="jdbcUserDetailsManager" class="org.springframework.security.provisioning.JdbcUserDetailsManager">
        <property name="dataSource" ref="oAuthDataSource"/>
    </bean>

    <bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails"/>
    </bean>


    <bean id="authorizationCodeServices"
          class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices">
        <constructor-arg name="dataSource" ref="oAuthDataSource"/>
    </bean>


    <bean id="clientDetails" class="com.nimble.security.oauth2.spring.provider.JdbcClientDetailsService">
        <constructor-arg name="dataSource" ref="oAuthDataSource"/>
    </bean>

    <bean id="authReq"
          class="com.nimble.security.oauth2.spring.provider.authentication.dao.NimbleJdbcAuthorizationRequestDAO">
        <constructor-arg name="dataSource" ref="oAuthDataSource"/>
    </bean>

    <bean id="authDao" class="com.nimble.security.oauth2.spring.provider.authentication.dao.JdbcAuthenticationDAO">
        <constructor-arg name="dataSource" ref="oAuthDataSource"/>
    </bean>

    <bean id="auth2AuthenticationRowMapper"
          class="com.nimble.security.oauth2.spring.provider.authentication.dao.sql.OAuth2AuthenticationRowMapper">
    </bean>

    <bean id="oAuth2AuthenticationDAO"
          class="com.nimble.security.oauth2.spring.provider.authentication.dao.JdbcNimbleOAuth2AuthenticationDAO">
        <constructor-arg name="dataSource" ref="oAuthDataSource"/>
        <constructor-arg name="authenticationTokenMapper" ref="auth2AuthenticationRowMapper"/>
    </bean>

    <bean id="oauth2AuthenticationManager"
          class="com.nimble.security.oauth2.spring.provider.authentication.NimbleOauth2AuthenticationManager">
        <property name="oAuth2AuthenticationDAO" ref="oAuth2AuthenticationDAO"/>
        <property name="authenticationDAO" ref="authDao"/>
        <property name="authorizationRequestDAO" ref="authReq"/>
    </bean>

    <bean id="accessTokenDAO" class="com.nimble.security.oauth2.spring.provider.token.dao.JdbcAccessTokenDAO">
        <constructor-arg name="dataSource" ref="oAuthDataSource"/>
    </bean>

    <bean id="refreshTokenDAO" class="com.nimble.security.oauth2.spring.provider.token.dao.JdbcRefreshTokenDAO">
        <constructor-arg name="dataSource" ref="oAuthDataSource"/>
    </bean>


    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="autodetectUserTransaction" value="true"/>
        <property name="allowCustomIsolationLevels" value="true"/>
    </bean>

    <!--    <bean id="jdbcTokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">
            <constructor-arg ref="oAuthDataSource"/>
        </bean>-->

    <oauth:expression-handler id="oauthExpressionHandler"/>

    <oauth:web-expression-handler id="oauthWebExpressionHandler"/>


</beans>
